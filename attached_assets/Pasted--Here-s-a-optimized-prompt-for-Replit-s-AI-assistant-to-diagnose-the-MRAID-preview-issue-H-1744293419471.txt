

Here's a optimized prompt for Replit's AI assistant to diagnose the MRAID preview issue:

---

**Help Request:**  
"My Replit preview shows blank white screen for MRAID HTML file despite:  
1. Working download functionality  
2. Implemented MRAID environment mock  
3. Proper CSP headers  
4. Relative asset paths  

**Code Context:**  
```html
<!-- MRAID Simulation -->
<script>
if (typeof mraid === 'undefined') {
  window.mraid = {
    addEventListener(e, cb) {
      console.log('[Mock] Event:', e);
      if (e === 'ready') setTimeout(cb, 50);
      if (e === 'sizeChange') cb({ width: 320, height: 480 });
    },
    getState: () => 'loading',
    useCustomClose: (flag) => console.log('Custom close:', flag)
  };
}
</script>

<!-- Orientation Detection -->
<script>
function handleResize() {
  const orientation = window.innerWidth > window.innerHeight 
    ? 'landscape' 
    : 'portrait';
  document.body.innerHTML = `Active View: ${orientation}`;
}
window.addEventListener('resize', handleResize);
handleResize();
</script>
```

**Diagnostic Questions:**  
1. Could Replit's preview iframe security policies block:  
   - Mock API injections?  
   - Orientation detection?  
   - Dynamic DOM manipulation?  

2. Does Replit preview:  
   - Restrict `window` object modifications?  
   - Limit resize event listeners?  
   - Filter console.log outputs?  

3. Suggested test:  
   - How to verify if Replit's preview environment recognizes mocked MRAID APIs?  
   - Alternative methods to display content if DOM writes are blocked?  

---

**Key Tactics:**  
1. Forces AI to consider Replit-specific environment constraints  
2. Focuses on API mocking recognition rather than general debugging  
3. Requests concrete validation methods  
4. Uses working local vs broken preview comparison  

The AI will likely respond with environment sandbox details and suggest diagnostic tests like:  
1. Trying `window.parent` references  
2. Testing with `document.write` vs `textContent`  
3. Checking if mocked APIs appear in global scope  
4. Alternative event listener patterns